#ifndef SHADER_INFO_H 
#define SHADER_INFO_H 
#pragma once 
/*
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
SHADER INFORMATION. Shader enums, uniforms, etc... 
Generated by a python script shader_info_generator.py 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 */ 
// SCENE_3D SHADER SECTION 
typedef enum 
{
    SCENE_3D_DEFINE_TEXCOORD_ATTRIB,
    SCENE_3D_DEFINE_COLOR_ATTRIB,
    SCENE_3D_DEFINE_COLOR_8BIT,
    SCENE_3D_DEFINE_NORMAL_ATTRIB,
    SCENE_3D_DEFINE_TANGENT_ATTRIB,
    SCENE_3D_DEFINE_BITANGENT_ATTRIB,
    SCENE_3D_DEFINE_TEXTUREINDEX_ATTRIB,
    SCENE_3D_DEFINE_INSTANCE_MAT3,
    SCENE_3D_DEFINE_INSTANCE_UV,
    SCENE_3D_DEFINE_INSTANCE_COLOR,
    SCENE_3D_DEFINE_INSTANCE_CUSTOM,
    SCENE_3D_DEFINE_RENDER_DEPTH,
    SCENE_3D_DEFINE_BILLBOARD_SHADOWS,
    SCENE_3D_DEFINE_USE_UNIFORM_CAMERA_MATRIX,
    SCENE_3D_DEFINE_USE_TEXTURE_ARR,
    SCENE_3D_DEFINE_SAMPLE_ALBEDO,
    SCENE_3D_DEFINE_SEMI_TRANSPARENT_PASS,
    SCENE_3D_DEFINE_MAX
}SCENE_3D_SHADER_DEFINES; 

typedef enum 
{
    SCENE_3D_UNIFORM_CAMERAMATRIX,
    SCENE_3D_UNIFORM_MAX
}SCENE_3D_SHADER_UNIFORMS; 

static const char* SCENE_3D_DEFINES_STR[] = 
{
    "TEXCOORD_ATTRIB", 
    "COLOR_ATTRIB", 
    "COLOR_8BIT", 
    "NORMAL_ATTRIB", 
    "TANGENT_ATTRIB", 
    "BITANGENT_ATTRIB", 
    "TEXTUREINDEX_ATTRIB", 
    "INSTANCE_MAT3", 
    "INSTANCE_UV", 
    "INSTANCE_COLOR", 
    "INSTANCE_CUSTOM", 
    "RENDER_DEPTH", 
    "BILLBOARD_SHADOWS", 
    "USE_UNIFORM_CAMERA_MATRIX", 
    "USE_TEXTURE_ARR", 
    "SAMPLE_ALBEDO", 
    "SEMI_TRANSPARENT_PASS", 
};
static const char* SCENE_3D_UNIFORMS_STR[] = 
{
    "u_cameraMatrix", 
};
static const char* SCENE_3D_TEXTURES_STR[] = 
{
    "texture_arr", 
    "texture_sample_albedo", 
};

// POST_PROCESS SHADER SECTION 
typedef enum 
{
    POST_PROCESS_DEFINE_USE_REINHARD_TONEMAP,
    POST_PROCESS_DEFINE_USE_UNCHARTED2_TONEMAP,
    POST_PROCESS_DEFINE_USE_ACES_TONEMAP,
    POST_PROCESS_DEFINE_USE_FXAA,
    POST_PROCESS_DEFINE_USE_FOG,
    POST_PROCESS_DEFINE_USE_BLOOM,
    POST_PROCESS_DEFINE_MAX
}POST_PROCESS_SHADER_DEFINES; 

typedef enum 
{
    POST_PROCESS_UNIFORM_GAMMA,
    POST_PROCESS_UNIFORM_EXPOSURE,
    POST_PROCESS_UNIFORM_BLOOMSTRENGTH,
    POST_PROCESS_UNIFORM_BRIGHTNESS,
    POST_PROCESS_UNIFORM_CONTRAST,
    POST_PROCESS_UNIFORM_SATURATION,
    POST_PROCESS_UNIFORM_FOGCOLOR,
    POST_PROCESS_UNIFORM_HEIGHTFOGDENSITY,
    POST_PROCESS_UNIFORM_HEIGHTFOGMIN,
    POST_PROCESS_UNIFORM_HEIGHTFOGMAX,
    POST_PROCESS_UNIFORM_HEIGHTFOGCURVE,
    POST_PROCESS_UNIFORM_DEPTHFOGDENSITY,
    POST_PROCESS_UNIFORM_DEPTHFOGBEGIN,
    POST_PROCESS_UNIFORM_DEPTHFOGEND,
    POST_PROCESS_UNIFORM_DEPTHFOGCURVE,
    POST_PROCESS_UNIFORM_DEPTHFOGENABLED,
    POST_PROCESS_UNIFORM_HEIGHTFOGENABLED,
    POST_PROCESS_UNIFORM_MAX
}POST_PROCESS_SHADER_UNIFORMS; 

static const char* POST_PROCESS_DEFINES_STR[] = 
{
    "USE_REINHARD_TONEMAP", 
    "USE_UNCHARTED2_TONEMAP", 
    "USE_ACES_TONEMAP", 
    "USE_FXAA", 
    "USE_FOG", 
    "USE_BLOOM", 
};
static const char* POST_PROCESS_UNIFORMS_STR[] = 
{
    "u_Gamma", 
    "u_Exposure", 
    "u_BloomStrength", 
    "u_Brightness", 
    "u_Contrast", 
    "u_Saturation", 
    "u_fogColor", 
    "u_heightFogDensity", 
    "u_heightFogMin", 
    "u_heightFogMax", 
    "u_heightFogCurve", 
    "u_depthFogDensity", 
    "u_depthFogBegin", 
    "u_depthFogEnd", 
    "u_depthFogCurve", 
    "u_depthFogEnabled", 
    "u_heightFogEnabled", 
};
static const char* POST_PROCESS_TEXTURES_STR[] = 
{
    "depth_texture", 
    "MainSceneTexture", 
    "BloomSceneTexture", 
};

// DEFERRED_SCENE SHADER SECTION 
typedef enum 
{
    DEFERRED_SCENE_DEFINE_USE_SSAO,
    DEFERRED_SCENE_DEFINE_USE_DIR_SHADOWS,
    DEFERRED_SCENE_DEFINE_MAX
}DEFERRED_SCENE_SHADER_DEFINES; 

typedef enum 
{
    DEFERRED_SCENE_UNIFORM_SHADOWSAMPLEKERNELS,
    DEFERRED_SCENE_UNIFORM_SHADOWSAMPLEAMOUNT,
    DEFERRED_SCENE_UNIFORM_SHADOWQUALITYRADIUS,
    DEFERRED_SCENE_UNIFORM_MAX
}DEFERRED_SCENE_SHADER_UNIFORMS; 

static const char* DEFERRED_SCENE_DEFINES_STR[] = 
{
    "USE_SSAO", 
    "USE_DIR_SHADOWS", 
};
static const char* DEFERRED_SCENE_UNIFORMS_STR[] = 
{
    "u_shadowSampleKernels", 
    "u_shadowSampleAmount", 
    "u_shadowQualityRadius", 
};
static const char* DEFERRED_SCENE_TEXTURES_STR[] = 
{
    "gNormalMetal", 
    "gColorRough", 
    "gEmissive", 
    "depth_texture", 
    "SSAO_texture", 
    "shadowMapsDepth", 
    "brdfLUT", 
    "irradianceMap", 
    "preFilterMap", 
};

// SSAO SHADER SECTION 
typedef enum 
{
    SSAO_DEFINE_PASS_ACCUM,
    SSAO_DEFINE_PASS_BLUR,
    SSAO_DEFINE_PASS_UPSAMPLE,
    SSAO_DEFINE_MAX
}SSAO_SHADER_DEFINES; 

typedef enum 
{
    SSAO_UNIFORM_RADIUS,
    SSAO_UNIFORM_BIAS,
    SSAO_UNIFORM_STRENGTH,
    SSAO_UNIFORM_SECONDPASS,
    SSAO_UNIFORM_VIEWPORTSIZE,
    SSAO_UNIFORM_MAX
}SSAO_SHADER_UNIFORMS; 

static const char* SSAO_DEFINES_STR[] = 
{
    "PASS_ACCUM", 
    "PASS_BLUR", 
    "PASS_UPSAMPLE", 
};
static const char* SSAO_UNIFORMS_STR[] = 
{
    "u_radius", 
    "u_bias", 
    "u_strength", 
    "u_secondPass", 
    "u_viewportSize", 
};
static const char* SSAO_TEXTURES_STR[] = 
{
    "depth_texture", 
    "normal_texture", 
    "noise_texture", 
    "ssao_texture", 
    "halfsize_ao_texture_nearest", 
    "halfsize_ao_texture_linear", 
    "fullsize_depth_texture", 
};

// DOF SHADER SECTION 
typedef enum 
{
    DOF_DEFINE_COC_PASS,
    DOF_DEFINE_COMPOSITE,
    DOF_DEFINE_BOKEH_CIRCULAR,
    DOF_DEFINE_BOKEH_BOX,
    DOF_DEFINE_MAX
}DOF_SHADER_DEFINES; 

typedef enum 
{
    DOF_UNIFORM_VIEWPORTSIZE,
    DOF_UNIFORM_NEARBLURENABLED,
    DOF_UNIFORM_NEARBEGIN,
    DOF_UNIFORM_NEAREND,
    DOF_UNIFORM_FARBLURENABLED,
    DOF_UNIFORM_FARBEGIN,
    DOF_UNIFORM_FAREND,
    DOF_UNIFORM_BLUR_SIZE,
    DOF_UNIFORM_BLUR_SCALE,
    DOF_UNIFORM_BLUR_STEPS,
    DOF_UNIFORM_SECOND_PASS,
    DOF_UNIFORM_MAX
}DOF_SHADER_UNIFORMS; 

static const char* DOF_DEFINES_STR[] = 
{
    "COC_PASS", 
    "COMPOSITE", 
    "BOKEH_CIRCULAR", 
    "BOKEH_BOX", 
};
static const char* DOF_UNIFORMS_STR[] = 
{
    "u_viewportSize", 
    "u_nearBlurEnabled", 
    "u_nearBegin", 
    "u_nearEnd", 
    "u_farBlurEnabled", 
    "u_farBegin", 
    "u_farEnd", 
    "u_blur_size", 
    "u_blur_scale", 
    "u_blur_steps", 
    "u_second_Pass", 
};
static const char* DOF_TEXTURES_STR[] = 
{
    "depth_texture", 
    "scene_texture", 
    "blur_texture", 
};

// BRDF SHADER SECTION 
typedef enum 
{
    BRDF_UNIFORM_SAMPLECOUNT,
    BRDF_UNIFORM_MAX
}BRDF_SHADER_UNIFORMS; 

static const char* BRDF_UNIFORMS_STR[] = 
{
    "u_sampleCount", 
};
// GODRAY SHADER SECTION 
typedef enum 
{
    GODRAY_DEFINE_RAYMARCH_PASS,
    GODRAY_DEFINE_BLUR_PASS,
    GODRAY_DEFINE_COMPOSITE_PASS,
    GODRAY_DEFINE_MAX
}GODRAY_SHADER_DEFINES; 

typedef enum 
{
    GODRAY_UNIFORM_VIEWPORTSIZE,
    GODRAY_UNIFORM_MAXSTEPS,
    GODRAY_UNIFORM_SCATTERING,
    GODRAY_UNIFORM_FOGCURVE,
    GODRAY_UNIFORM_SECONDPASS,
    GODRAY_UNIFORM_MAX
}GODRAY_SHADER_UNIFORMS; 

static const char* GODRAY_DEFINES_STR[] = 
{
    "RAYMARCH_PASS", 
    "BLUR_PASS", 
    "COMPOSITE_PASS", 
};
static const char* GODRAY_UNIFORMS_STR[] = 
{
    "u_viewportSize", 
    "u_maxSteps", 
    "u_scattering", 
    "u_fogCurve", 
    "u_secondPass", 
};
static const char* GODRAY_TEXTURES_STR[] = 
{
    "half_size_depth_texture", 
    "full_size_depth_texture", 
    "fog_texture", 
    "shadowMapsDepth", 
};

// BOX_BLUR SHADER SECTION 
typedef enum 
{
    BOX_BLUR_UNIFORM_SIZE,
    BOX_BLUR_UNIFORM_DIR,
    BOX_BLUR_UNIFORM_BLURSCALE,
    BOX_BLUR_UNIFORM_MAX
}BOX_BLUR_SHADER_UNIFORMS; 

static const char* BOX_BLUR_UNIFORMS_STR[] = 
{
    "u_size", 
    "u_dir", 
    "u_blurScale", 
};
static const char* BOX_BLUR_TEXTURES_STR[] = 
{
    "source_texture", 
};

// BLOOM SHADER SECTION 
typedef enum 
{
    BLOOM_DEFINE_DOWNSAMPLE_PASS,
    BLOOM_DEFINE_UPSAMPLE_PASS,
    BLOOM_DEFINE_MAX
}BLOOM_SHADER_DEFINES; 

typedef enum 
{
    BLOOM_UNIFORM_SRCRESOLUTION,
    BLOOM_UNIFORM_MIPLEVEL,
    BLOOM_UNIFORM_THRESHOLD,
    BLOOM_UNIFORM_SOFTTHRESHOLD,
    BLOOM_UNIFORM_GAMMA,
    BLOOM_UNIFORM_FILTERRADIUS,
    BLOOM_UNIFORM_MAX
}BLOOM_SHADER_UNIFORMS; 

static const char* BLOOM_DEFINES_STR[] = 
{
    "DOWNSAMPLE_PASS", 
    "UPSAMPLE_PASS", 
};
static const char* BLOOM_UNIFORMS_STR[] = 
{
    "u_srcResolution", 
    "u_mipLevel", 
    "u_threshold", 
    "u_softThreshold", 
    "u_gamma", 
    "u_filterRadius", 
};
static const char* BLOOM_TEXTURES_STR[] = 
{
    "source_texture", 
};

// SCREEN_SHADER SHADER SECTION 
typedef enum 
{
    SCREEN_SHADER_UNIFORM_PROJECTION,
    SCREEN_SHADER_UNIFORM_MAX
}SCREEN_SHADER_SHADER_UNIFORMS; 

static const char* SCREEN_SHADER_UNIFORMS_STR[] = 
{
    "u_projection", 
};
static const char* SCREEN_SHADER_TEXTURES_STR[] = 
{
    "texture_arr", 
};

// DEBUG_SCREEN SHADER SECTION 
typedef enum 
{
    DEBUG_SCREEN_UNIFORM_SELECTION,
    DEBUG_SCREEN_UNIFORM_MAX
}DEBUG_SCREEN_SHADER_UNIFORMS; 

static const char* DEBUG_SCREEN_UNIFORMS_STR[] = 
{
    "u_selection", 
};
static const char* DEBUG_SCREEN_TEXTURES_STR[] = 
{
    "NormalMetalTexture", 
    "AlbedoRoughTexture", 
    "DepthTexture", 
    "AOTexture", 
    "BloomTexture", 
};

// LC_WORLD SHADER SECTION 
typedef enum 
{
    LC_WORLD_DEFINE_USE_TBN_MATRIX,
    LC_WORLD_DEFINE_USE_TEXCOORDS,
    LC_WORLD_DEFINE_FORWARD_PASS,
    LC_WORLD_DEFINE_CHUNK_INDEX_USE_OFFSET,
    LC_WORLD_DEFINE_SEMI_TRANSPARENT,
    LC_WORLD_DEFINE_USE_CLIP_DISTANCE,
    LC_WORLD_DEFINE_USE_UNIFORM_MATRIX,
    LC_WORLD_DEFINE_GBUFFER_PASS,
    LC_WORLD_DEFINE_DEPTH_PASS,
    LC_WORLD_DEFINE_MAX
}LC_WORLD_SHADER_DEFINES; 

typedef enum 
{
    LC_WORLD_UNIFORM_CHUNKOFFSET,
    LC_WORLD_UNIFORM_CLIPDISTANCE,
    LC_WORLD_UNIFORM_MATRIX,
    LC_WORLD_UNIFORM_MAX
}LC_WORLD_SHADER_UNIFORMS; 

static const char* LC_WORLD_DEFINES_STR[] = 
{
    "USE_TBN_MATRIX", 
    "USE_TEXCOORDS", 
    "FORWARD_PASS", 
    "CHUNK_INDEX_USE_OFFSET", 
    "SEMI_TRANSPARENT", 
    "USE_CLIP_DISTANCE", 
    "USE_UNIFORM_MATRIX", 
    "GBUFFER_PASS", 
    "DEPTH_PASS", 
};
static const char* LC_WORLD_UNIFORMS_STR[] = 
{
    "u_chunkOffset", 
    "u_clipDistance", 
    "u_matrix", 
};
static const char* LC_WORLD_TEXTURES_STR[] = 
{
    "texture_atlas", 
    "texture_atlas_normal", 
    "texture_atlas_mer", 
    "irradianceMap", 
    "preFilterMap", 
    "brdfLUT", 
};

// LC_OCCLUSION_BOXES SHADER SECTION 
// LC_WATER SHADER SECTION 
static const char* LC_WATER_TEXTURES_STR[] = 
{
    "skybox_texture", 
    "dudv_map", 
    "reflection_texture", 
    "refraction_texture", 
    "refraction_depth", 
    "gradient_map", 
};

// PROCESS_CHUNKS SHADER SECTION 
// CUBEMAP SHADER SECTION 
typedef enum 
{
    CUBEMAP_DEFINE_RENDER_SKYBOX_PASS,
    CUBEMAP_DEFINE_CONVERT_TO_CUBEMAP_PASS,
    CUBEMAP_DEFINE_IRRADIANCE_PASS,
    CUBEMAP_DEFINE_PREFILTER_PASS,
    CUBEMAP_DEFINE_COMPUTE_SKY_PASS,
    CUBEMAP_DEFINE_MAX
}CUBEMAP_SHADER_DEFINES; 

typedef enum 
{
    CUBEMAP_UNIFORM_PROJ,
    CUBEMAP_UNIFORM_VIEW,
    CUBEMAP_UNIFORM_SKYCOLOR,
    CUBEMAP_UNIFORM_SKYHORIZONCOLOR,
    CUBEMAP_UNIFORM_GROUNDHORIZONCOLOR,
    CUBEMAP_UNIFORM_GROUNDCOLOR,
    CUBEMAP_UNIFORM_IRRADIANCESAMPLEDELTA,
    CUBEMAP_UNIFORM_PREFILTERROUGHNESS,
    CUBEMAP_UNIFORM_PREFILTERSAMPLECOUNT,
    CUBEMAP_UNIFORM_MAX
}CUBEMAP_SHADER_UNIFORMS; 

static const char* CUBEMAP_DEFINES_STR[] = 
{
    "RENDER_SKYBOX_PASS", 
    "CONVERT_TO_CUBEMAP_PASS", 
    "IRRADIANCE_PASS", 
    "PREFILTER_PASS", 
    "COMPUTE_SKY_PASS", 
};
static const char* CUBEMAP_UNIFORMS_STR[] = 
{
    "u_proj", 
    "u_view", 
    "u_skyColor", 
    "u_skyHorizonColor", 
    "u_groundHorizonColor", 
    "u_groundColor", 
    "u_IrradiancesampleDelta", 
    "u_prefilterRoughness", 
    "u_prefilterSampleCount", 
};
static const char* CUBEMAP_TEXTURES_STR[] = 
{
    "equirectangularMap", 
    "environmentMap", 
    "noise_texture", 
    "night_texture", 
};


#endif