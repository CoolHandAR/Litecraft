#version 460 core

#include "../shader_commons.incl"
#include "../scene_incl.incl"

layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

uniform sampler2D depth_texture;
uniform sampler2D normal_texture;

#ifdef PASS_ACCUM
#define NUM_KERNLES_SAMPLES 32
const vec3 kernelSamples[NUM_KERNLES_SAMPLES] = // precalculated hemisphere kernel (low discrepancy noiser)
{
    vec3(-0.668154, -0.084296, 0.219458),
    vec3(-0.092521,  0.141327, 0.505343),
    vec3(-0.041960,  0.700333, 0.365754),
    vec3( 0.722389, -0.015338, 0.084357),
    vec3(-0.815016,  0.253065, 0.465702),
    vec3( 0.018993, -0.397084, 0.136878),
    vec3( 0.617953, -0.234334, 0.513754),
    vec3(-0.281008, -0.697906, 0.240010),
    vec3( 0.303332, -0.443484, 0.588136),
    vec3(-0.477513,  0.559972, 0.310942),
    vec3( 0.307240,  0.076276, 0.324207),
    vec3(-0.404343, -0.615461, 0.098425),
    vec3( 0.152483, -0.326314, 0.399277),
    vec3( 0.435708,  0.630501, 0.169620),
    vec3( 0.878907,  0.179609, 0.266964),
    vec3(-0.049752, -0.232228, 0.264012),
    vec3( 0.537254, -0.047783, 0.693834),
    vec3( 0.001000,  0.177300, 0.096643),
    vec3( 0.626400,  0.524401, 0.492467),
    vec3(-0.708714, -0.223893, 0.182458),
    vec3(-0.106760,  0.020965, 0.451976),
    vec3(-0.285181, -0.388014, 0.241756),
    vec3( 0.241154, -0.174978, 0.574671),
    vec3(-0.405747,  0.080275, 0.055816),
    vec3( 0.079375,  0.289697, 0.348373),
    vec3( 0.298047, -0.309351, 0.114787),
    vec3(-0.616434, -0.117369, 0.475924),
    vec3(-0.035249,  0.134591, 0.840251),
    vec3( 0.175849,  0.971033, 0.211778),
    vec3( 0.024805,  0.348056, 0.240006),
    vec3(-0.267123,  0.204885, 0.688595),
    vec3(-0.077639, -0.753205, 0.070938)
};
uniform sampler2D noise_texture;

uniform float u_radius;
uniform float u_bias;
uniform float u_strength;
#endif

#ifdef PASS_BLUR
uniform sampler2D ssao_texture;

const float indices[9] = {-4, -3, -2, -1, 0, +1, +2, +3, +4};
const float discard_threshold = 0.85;

uniform bool u_secondPass;
#endif

#ifdef PASS_UPSAMPLE
uniform sampler2D halfsize_ao_texture_nearest;
uniform sampler2D halfsize_ao_texture_linear;
uniform sampler2D fullsize_depth_texture;

const ivec2 SAMPLE_OFFSETS[4] = {ivec2(0, 0), ivec2(0, 1), ivec2(1, 0), ivec2(1, 1)};
#endif

uniform vec2 u_viewportSize;
layout(r8, binding = 0) writeonly restrict uniform image2D ssaoOutput;

void main()
{
    const ivec2 iCoords = ivec2(gl_GlobalInvocationID.xy);

    //Make sure we are not processing more than we need to
    if (any(greaterThanEqual(iCoords, u_viewportSize))) 
    { 
		return;
	}

    vec2 coords = (vec2(iCoords + 0.5) / vec2(u_viewportSize));
    vec2 pixel_size = 1.0 / u_viewportSize;

#ifdef PASS_ACCUM
    float depth = texture(depth_texture, coords).r;

    if(depth >= 1.0)
    {
        imageStore(ssaoOutput, iCoords, vec4(0, 0, 0, 0));
        return;
    }

    vec3 ViewPos = depthToViewPosDirect(depth, cam.invProj, coords);
    vec3 WorldPos = (cam.invView * vec4(ViewPos, 1.0)).xyz;
    vec3 Normal = normalize(texture(normal_texture, coords).rgb * 2.0 - 1.0);
    vec2 NoiseScale = vec2(u_viewportSize.x / 4.0, u_viewportSize.y / 4.0);
    vec3 RandomVec = normalize(texture(noise_texture, coords * NoiseScale).xyz);

    vec3 tangent = normalize(RandomVec - Normal * dot(RandomVec, Normal));
    vec3 biTangent = cross(Normal, tangent);
    mat3 TBN = mat3(tangent, biTangent, Normal);

    float occlusion = 0.0;
    for(int i = 0; i < NUM_KERNLES_SAMPLES; ++i)
    {
        vec3 SamplePos = TBN * kernelSamples[i];
        SamplePos = WorldPos + SamplePos * u_radius;
        SamplePos = (cam.view * vec4(SamplePos, 1.0)).xyz;

        vec4 offset = vec4(SamplePos, 1.0);
        offset = cam.proj * offset;
        offset.xyz /= offset.w;
        offset.xy = offset.xy * 0.5 + 0.5;

        float sampleDepth = depthToViewSpace(depth_texture, cam.invProj, offset.xy);

        float rangeCheck = smoothstep(0.0, 1.0, u_radius / max(abs(ViewPos.z - sampleDepth), 0.001));
        occlusion += step(SamplePos.z + u_bias, sampleDepth) * rangeCheck;
    }

    occlusion = 1.0 - (occlusion / NUM_KERNLES_SAMPLES);
    occlusion = pow(occlusion, u_strength);

    imageStore(ssaoOutput, iCoords, vec4(occlusion, 0, 0, 0));
#endif

#ifdef PASS_BLUR
    vec2 blur_step = (u_secondPass ? vec2(0.0, 1.0) : vec2(1.0, 0.0));
	
    //if half size
    coords += pixel_size * 0.25;

	blur_step *= pixel_size;

    vec3 test_normal = normalize(texture(normal_texture, coords + indices[4] * blur_step).rgb * 2.0 - 1.0);;

    float total_weight = 1.0;
    float weights[9] =
    {
        0.013519569015984728,
        0.047662179108871855,
        0.11723004402070096,
        0.20116755999375591,
        0.240841295721373,
        0.20116755999375591,
        0.11723004402070096,
        0.047662179108871855,
        0.013519569015984728
    };

    for(int i = 0; i < 9; i++)
    {
        vec3 sample_normals = normalize(texture(normal_texture, coords + indices[i] * blur_step).rgb * 2.0 - 1.0);

        if(dot(sample_normals, test_normal) < discard_threshold)
        {
            total_weight -= weights[i];
            weights[i] = 0;
        }
    }

    float accum = 0.0;

    for(int i = 0; i < 9; i++)
    {   
        if(weights[i] > 0)
        {
            accum += texture(ssao_texture, coords + indices[i] * blur_step).r * weights[i];
        }
    }

    accum /= max(total_weight, 0.001);

    imageStore(ssaoOutput, ivec2(gl_GlobalInvocationID.xy), vec4(accum));
#endif

#ifdef PASS_UPSAMPLE
     //depth aware upsampling src: https://eleni.mutantstargoat.com/hikiko/depth-aware-upsampling-6/

    float d0 = texture(fullsize_depth_texture, coords).r;
    
    float depth_samples[4];
    depth_samples[0] = textureOffset(depth_texture, coords, ivec2(0, 0)).r;
    depth_samples[1] = textureOffset(depth_texture, coords, ivec2(0, 1)).r;
    depth_samples[2] = textureOffset(depth_texture, coords, ivec2(1, 0)).r;
    depth_samples[3] = textureOffset(depth_texture, coords, ivec2(1, 1)).r;

    float min_dist = 1.0;

    int best_index = 0;
    for(int i = 0; i < 4; i++)
    {
        float dist = abs(d0 - depth_samples[i]);

        if(min_dist > dist)
        {
            min_dist = dist;
            best_index = i;
        }
    }

    float nearest_ao_sample = textureOffset(halfsize_ao_texture_nearest, coords * 0.5, SAMPLE_OFFSETS[best_index]).r;

    vec3 normals[4];
    normals[0] = textureOffset(normal_texture, coords, ivec2(0, 0)).rgb;
    normals[1] = textureOffset(normal_texture, coords, ivec2(0, 1)).rgb;
    normals[2] = textureOffset(normal_texture, coords, ivec2(1, 0)).rgb;
    normals[3] = textureOffset(normal_texture, coords, ivec2(1, 1)).rgb;

    float dot01 = dot(normals[0], normals[1]);
    float dot02 = dot(normals[0], normals[2]);
    float dot03 = dot(normals[0], normals[3]);

    float min_dot = min(dot01, min(dot02, dot03));
    float s = step(0.997, min_dot);

    float linear_ao_sample = texture(halfsize_ao_texture_linear, coords * 0.5).r;

    float final_ao = mix(nearest_ao_sample, linear_ao_sample, s);

    imageStore(ssaoOutput, iCoords, vec4(final_ao, 0, 0, 0));
#endif
}