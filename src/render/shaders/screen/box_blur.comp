#version 460 core

layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(rgba8, binding = 0) writeonly restrict uniform image2D outputImage;

uniform sampler2D source_texture;

uniform int u_size;

void main()
{
    ivec2 iCoords = ivec2(gl_GlobalInvocationID.xy);

    vec2 texSize = textureSize(source_texture, 0);

    //Make sure we are not processing more than we need to
    if (any(greaterThanEqual(iCoords, texSize))) 
    { 
		return;
	}

    vec2 coords = (vec2(iCoords + 0.5) / vec2(texSize));

    int half_size = u_size / 2;
    vec2 texelSize = 1.0 / vec2(texSize);
    vec4 result = vec4(0.0);
    for (int x = -half_size; x < half_size; ++x) 
    {
        for (int y = -half_size; y < half_size; ++y) 
        {
            vec2 offset = vec2(float(x), float(y)) * texelSize;
            result += texture(source_texture, coords + offset);
        }
    }
    vec4 final_result = result / (u_size * u_size);
   
    imageStore(outputImage, ivec2(gl_GlobalInvocationID.xy), final_result);
}
