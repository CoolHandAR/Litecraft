#version 460 core

#include "../scene_incl.incl"
#include "../shader_commons.incl"

layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

uniform sampler2D half_size_depth_texture;
uniform sampler2D full_size_depth_texture;

uniform sampler2D fog_texture;

#ifdef RAYMARCH_PASS
uniform sampler2DArrayShadow shadowMapsDepth;

layout(r16f, binding = 0) writeonly restrict uniform image2D fogImage;
#endif

#ifdef BLUR_PASS
layout(r16f, binding = 0) writeonly restrict uniform image2D fogImage;
#endif

#ifdef COMPOSITE_PASS
layout(rgba16f, binding = 0) restrict uniform image2D sceneImage;
#endif

uniform vec2 u_viewportSize;
uniform int u_maxSteps;

uniform float u_scattering;
uniform float u_fogCurve;

uniform bool u_secondPass;

#define NUM_GAUSS_WEIGHTS 8

const float PI = 3.14159265359;
const float gauss_weights[NUM_GAUSS_WEIGHTS] = { 0.14446445, 0.13543542, 0.11153505, 0.08055309, 0.05087564, 0.02798160, 0.01332457, 0.00545096};

float ZtoViewSpace(float z, mat4 inverseProj)
{
    float depth = z;

    float ndc_depth = depth * 2.0 - 1.0;

    float w_component = 1.0;

    float viewSpaceDepth = inverseProj[2][2] * ndc_depth + inverseProj[3][2] * w_component;
    float viewSpaceW = inverseProj[2][3] * ndc_depth + inverseProj[3][3] * w_component;

    viewSpaceDepth /= viewSpaceW;
    
    return viewSpaceDepth;
}
#ifdef RAYMARCH_PASS
float shadowSample(vec3 coords, float depth)
{   
    vec4 sampleCoords;
    sampleCoords.xyw = vec3(coords.xy, depth);
    sampleCoords.z = coords.z;

    float shadow = texture(shadowMapsDepth, sampleCoords);

    return shadow;
}


float ShadowCalculation(float viewSpaceZ, vec3 fragPosWorldSpace)
{
    // select cascade layer
    float depthValue = abs(viewSpaceZ);

    int layer = -1;
    for (int i = 0; i < scene.shadow_split_count; ++i)
    {
        if (depthValue < scene.shadow_splits[i])
        {
            layer = i;
            break;
        }
    }
    if (layer == -1)
    {
        layer = scene.shadow_split_count - 1;
    }

    vec3 vertex = fragPosWorldSpace;

    highp vec4 fragPosLightSpace = scene.shadow_matrixes[layer] * vec4(vertex, 1.0);

    // perform perspective divide
    highp vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;
    // transform to [0,1] range
    projCoords.xyz = projCoords.xyz * 0.5 + 0.5;

    // get depth of current fragment from light's perspective
    float currentDepth = projCoords.z;

    // keep the shadow at 0.0 when outside the far_plane region of the light's frustum.
    if (currentDepth > 1.0)
    {
        return 1.0;
    }
    
    float shadow = shadowSample(vec3(projCoords.xy, layer), currentDepth);
    
    return shadow;
}
#endif

float Schlick(float k, float costh)
{
    return (1.0 - k * k) / (4.0 * PI * pow(1.0 - k * costh, 2.0));
}
float henyey_greenstein(float cos_theta, float g) 
{
	const float k = 0.0795774715459; // 1 / (4 * PI)
	return k * (1.0 - g * g) / (pow(1.0 + g * g - 2.0 * g * cos_theta, 1.5));
}

float getDebandNoise( vec2 p )
{
    return fract(sin(dot(p, vec2(41, 289)))*45758.5453 ); 
}

void main()
{
	const ivec2 iCoords = ivec2(gl_GlobalInvocationID.xy);

    //Make sure we are not processing more than we need to
    if (any(greaterThanEqual(iCoords, u_viewportSize))) 
    { 
		return;
	}

	vec2 coords = (vec2(iCoords + 0.5) / u_viewportSize);
	vec2 pixel_size = 1.0 / u_viewportSize;
	
#ifdef RAYMARCH_PASS
	float depth = texture(half_size_depth_texture, coords).r;

	vec3 ViewPos = depthToViewPosDirect(depth, cam.invProj, coords);
    vec3 WorldPos = (cam.invView * vec4(ViewPos, 1.0)).xyz;

	vec3 startPos = cam.position.xyz;
	vec3 rayVector = WorldPos - startPos;
	vec3 rayDir = normalize(rayVector);
	float rayLength = length(rayVector);

	float stepLength = rayLength / u_maxSteps;
	vec3 stepVector = rayDir * stepLength;

    float startOffset = stepLength * getDebandNoise(coords);
	vec3 currentPos = startPos + (rayDir * startOffset);

	const float scattering_value = henyey_greenstein(dot(rayDir, normalize(scene.dirLightDirection.xyz)), u_scattering);

	float accumFog = 0.0;

	for(int i = 0; i < u_maxSteps; i++)
	{
		 float viewSpaceZ = ZtoViewSpace(currentPos.z, cam.invProj); 
   
         float shadow_value = ShadowCalculation(viewSpaceZ, currentPos.xyz);
        
         accumFog += (scattering_value) * shadow_value;
      
         currentPos += stepVector;
	}
    accumFog /= u_maxSteps;

    imageStore(fogImage, iCoords, vec4(accumFog));
#endif

#ifdef BLUR_PASS
    float depth = texture(half_size_depth_texture, coords).r;

    vec2 blur_dir = (u_secondPass ?  vec2(0.0, 1.0) : vec2(1.0, 0.0));
	blur_dir *= pixel_size;

    float accumResult = 0.0;
	float accumWeight = 0.0;

    float radius = -4;
    for(int i = 0; i < NUM_GAUSS_WEIGHTS; i++)
    {
        radius += 1.0;

		vec2 uv_of = coords + blur_dir * radius;

		float sampleDepth = texture(half_size_depth_texture, uv_of).r;
		float sampleFog = texture(fog_texture, uv_of).r;

		float depthDiff = abs(sampleDepth - depth);
		float r2 = depthDiff;
		float g = exp(-r2 * r2);
		float weight = g * gauss_weights[i];

		accumResult += weight * sampleFog;
		accumWeight += weight;
    }

    accumResult /= accumWeight;
    
    imageStore(fogImage, iCoords, vec4(accumResult));

#endif

#ifdef COMPOSITE_PASS
    
    //DEPTH AWARE UPSAMPLING SRC:https://eleni.mutantstargoat.com/hikiko/on-depth-aware-upsampling/

    vec2 pixelSize2 = 1.0 / (u_viewportSize * 0.5);

    float d0 = texture(full_size_depth_texture, coords).r;

	float d1 = textureOffset(half_size_depth_texture, coords, ivec2(0, 1)).r;
	float d2 = textureOffset(half_size_depth_texture, coords, ivec2(0, -1)).r;
	float d3 = textureOffset(half_size_depth_texture, coords, ivec2(1, 0)).r;
	float d4 = textureOffset(half_size_depth_texture, coords, ivec2(-1, 0)).r;

	d1 = abs(d0 - d1);
	d2 = abs(d0 - d2);
	d3 = abs(d0 - d3);
	d4 = abs(d0 - d4);
 
	float dmin = min(min(d1, d2), min(d3, d4));

	ivec2 offset = ivec2(0);

    if(dmin == d1)
	{
		offset = ivec2(0, 1);
	}
	else if(dmin == d2)
	{
		offset = ivec2(0, -1);
	}
	else if(dmin == d3)
	{
		offset = ivec2(1, 0);
	}
	else if(dmin == d4)
	{
		offset = ivec2(-1, 0);
	}

    float fog = textureOffset(fog_texture, coords, offset).r;

    fog = pow(fog, u_fogCurve);

    //fog *= 0.7;
 
    vec3 fog_color = vec3(scene.dirLightColor.rgb * scene.dirLightAmbientIntensity) * fog;

    vec4 scene_color = imageLoad(sceneImage, iCoords).rgba;
	
	vec4 final;
	final.rgb = scene_color.rgb + fog_color.rgb;
	final.a = scene_color.a;

	imageStore(sceneImage, iCoords, final);
#endif 
}