#version 460 core

#include "lc_world_incl.incl"

#define MAX_CHUNKS 5000

layout (local_size_x = 16, local_size_y = 1, local_size_z = 1) in;

struct CombinedChunkDrawCmdData
{
	//OPAQUES
	uint o_count;
	uint o_first;

	//TRANSPARENTS
	uint t_count;
	uint t_first;

    //WATER
	uint w_count;
	uint w_first;
};

struct DrawArraysIndirectCommand
{
    uint  count;
    uint  instanceCount;
    uint  first;
    uint  baseInstance;
};

layout (std430, binding = 10) restrict buffer OpaqueAtomicCounterBuffer
{
  uint atomic_counter_opaque;
};

layout (std430, binding = 11) restrict buffer TransparentAtomicCounterBuffer
{
  uint atomic_counter_transparent;
};
layout (std430, binding = 12) restrict buffer WaterAtomicCounterBuffer
{
  uint atomic_counter_water;
};
layout (std430, binding = 14) readonly restrict buffer ChunkDrawCmdsBuffer
{
    CombinedChunkDrawCmdData data[];
} chunk_draw_cmds;

layout (std430, binding = 15) readonly restrict buffer PrevInFrustrumBitsetBuffer
{
    uint data[];
} prev_in_frustrum_bitset;
layout (std430, binding = 16) readonly restrict buffer VisibleChunkIndexesBuffer
{
    uint data[];
} visible_chunk_indexes;
layout (std430, binding = 17) writeonly restrict buffer SortedDrawCmdsBuffer
{
   DrawArraysIndirectCommand chunk_draw_cmds_sorted[];
};

void main()
{
	if(gl_GlobalInvocationID.x == 0)
    {
      atomicExchange(atomic_counter_opaque, 0);
      atomicExchange(atomic_counter_transparent, 0);
      atomicExchange(atomic_counter_water, 0);
    }

    uint index = visible_chunk_indexes.data[gl_GlobalInvocationID.x];

    uint query_index = index / 32;
    uint local_index = index % 32;

    uint prev_in_frustrum_bitset = prev_in_frustrum_bitset.data[query_index];
    bool prev_in_frustrum = bool(prev_in_frustrum_bitset >> local_index & uint(1));

#define CHUNK chunk_data.data[index]
#define DRAWCMD chunk_draw_cmds.data[index]

    uint total_vert_count = DRAWCMD.o_count + DRAWCMD.t_count + DRAWCMD.w_count;
    
    //Is the chunk completely empty?
    if(total_vert_count == 0)
    {
        return;
    }

    bool skip_occlusion_check = false;

    //was this chunk previously in frustrum?
    if(prev_in_frustrum == false)
    {
        //if this chunk was not previously in frustrum
        //we will skip the occlusion check
        skip_occlusion_check = true;
    }

    //if this chunk failed the oclussion test, was not visible in the last frame and was in frustrum, we skip drawing this chunk
    if(bool(CHUNK.vis_flags & CHUNK_FLAG_VISIBLE) == true  || skip_occlusion_check == true)
    {
        DrawArraysIndirectCommand draw_cmd;
        draw_cmd.instanceCount = 1;
        draw_cmd.baseInstance = index;

         //If we got here, this means this chunk is visible

        //opaques
        if(DRAWCMD.o_count > 0)
        {
            draw_cmd.first = DRAWCMD.o_first;
            draw_cmd.count = DRAWCMD.o_count;
     
            uint counter = atomicAdd(atomic_counter_opaque, 1);
            chunk_draw_cmds_sorted[counter] =  draw_cmd;
        }
        //transparents
        if(DRAWCMD.t_count > 0)
        {
            draw_cmd.first = DRAWCMD.t_first;
            draw_cmd.count = DRAWCMD.t_count;

            uint counter = atomicAdd(atomic_counter_transparent, 1);
            chunk_draw_cmds_sorted[counter + MAX_CHUNKS] = draw_cmd;

        }
        //water
        if(DRAWCMD.w_count > 0)
        {
            draw_cmd.first = DRAWCMD.w_first;
            draw_cmd.count = DRAWCMD.w_count;
       
            uint counter = atomicAdd(atomic_counter_water, 1);
            chunk_draw_cmds_sorted[counter + MAX_CHUNKS * 2] = draw_cmd;
        }
    }
  
}